df_all[[order_code_n]] <- df
}
write_xlsx(df_all,
path = "C:/Users/wang/Desktop/lab_clean_process/clean/lab_name.xlsx")
library(smd)
source("../src/stat_test.R", chdir = TRUE)
library(testthat)
set.seed(123)
x1 <- c(rnorm(50, 0, 1), rnorm(50, 2, 1))
x2 <- c(rnorm(50, 0, 1), rnorm(50, 0, 1))
y1 <- c(rep('a', 50), rep('b', 50))
y2 <- c(rep('a', 50), rep('b', 50), rep('c', 50), rep('d', 50))
y3 <- c(rep('a', 3), rep('b', 97))
df <- data.table(x1, x2, y1, y2, y3)
df
as.character(formula)
formula <- as.formula('x1 ~ y1')
formula
as.character(formula)[2:3]
col <- as.character(formula)[2:3]
col
source("../src/stat_test.R", chdir = TRUE)
library(testthat)
set.seed(123)
x1 <- c(rnorm(50, 0, 1), rnorm(50, 2, 1))
x2 <- c(rnorm(50, 0, 1), rnorm(50, 0, 1))
y1 <- c(rep('a', 50), rep('b', 50))
y2 <- c(rep('a', 50), rep('b', 50), rep('c', 50), rep('d', 50))
y3 <- c(rep('a', 3), rep('b', 97))
df <- data.table(x1, x2, y1, y2, y3)
source("../src/stat_test.R", chdir = TRUE)
set.seed(123)
x1 <- c(rnorm(50, 0, 1), rnorm(50, 2, 1))
x2 <- c(rnorm(50, 0, 1), rnorm(50, 0, 1))
y1 <- c(rep('a', 50), rep('b', 50))
y2 <- c(rep('a', 50), rep('b', 50), rep('c', 50), rep('d', 50))
y3 <- c(rep('a', 3), rep('b', 97))
df <- data.table(x1, x2, y1, y2, y3)
get_stat_test(df, 'y1', 'x1')
get_stat_test <- function(df, group_col, value_col){
method <- judge_test_name(df, group_col, value_col)
p.value <- c()
for(m in method){
func_ <- test_dict[[m]]
f <- as.formula(paste0(value_col, '~', group_col))
test_res <- func_(f, df)
p <- test_res$p.value
p <- ifelse(p < 0.001, '<0.001', as.character(round(p,3)))
p.value <- c(p.value, p)
}
res <- data.table(method, p.value)
return(res)
}
get_stat_test(df, 'y1', 'x1')
library(data.table)
library(smd)
customize_aov <- function(formula, df){
test_res <- aov(formula, df)
p <- summary(test_res)[[1]]$`Pr(>F)`[1]
res <- list(p.value = p)
return(res)
}
customize_chi_test <- function(formula, df){
col <- as.character(formula)[2:3]
tb <- table(df[,col, with=F])
set.seed(123)
test_res <- chisq.test(tb, simulate.p.value = T)
p <- test_res$p.value
res <- list(p.value = p)
return(res)
}
customize_fisher_test <- function(formula, df){
col <- as.character(formula)[2:3]
tb <- table(df[,col, with=F])
test_res <- fisher.test(tb)
p <- test_res$p.value
res <- list(p.value = p)
return(res)
}
customize_smd <- function(formula, df){
col <- as.character(formula)[2:3]
tb <- table(df[,col, with=F])
test_res <- fisher.test(tb)
}
test_dict = list(
t_test = t.test,
wilcox_test = wilcox.test,
aov_test = customize_aov,
ks_test = kruskal.test,
chi_test = customize_chi_test,
fisher_test = customize_fisher_test
)
judge_test_name <- function(df, group_col, value_col){
value_class = class(df[, get(value_col)])
test_func <- c()
if(value_class == 'numeric'){
n_group <- df[,length(unique(get(group_col)))]
if(n_group == 2){
test_func <- c(test_func, 't_test', 'wilcox_test')
}
if(n_group > 2){
test_func <- c(test_func, 'aov_test', 'ks_test')
}
}
if(value_class == 'character'){
tb1 <- df[,table(get(group_col), get(value_col))]
set.seed(123)
c.test <- chisq.test(tb1, simulate.p.value = T)
if(sum(c.test$expected < 5) >  length(tb1)*0.2){
test_func <- c(test_func, 'fisher_test')
}else{
test_func <- c(test_func, 'chi_test')
}
}
return(test_func)
}
get_stat_test <- function(df, group_col, value_col){
method <- judge_test_name(df, group_col, value_col)
p.value <- c()
for(m in method){
func_ <- test_dict[[m]]
f <- as.formula(paste0(value_col, '~', group_col))
test_res <- func_(f, df)
p <- test_res$p.value
p <- ifelse(p < 0.001, '<0.001', as.character(round(p,3)))
p.value <- c(p.value, p)
}
res <- data.table(method, p.value)
return(res)
}
get_stat_test(df, 'y1', 'x1')
col
?smd
col[1]
df[,col[1],with=F]
unlist(df[,col[1],with=F])
df[,col[1],with=F]
smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
df[,col, with=F]
a = df[,col, with=F]
a[,mean(x1),by=y1]
res <- smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
res
customize_smd <- function(formula, df){
col <- as.character(formula)[2:3]
tb <- table(df[,col, with=F])
res <- smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
return(res$estimate)
}
f <- as.formula('x1 ~ y2')
col <- as.character(formula)[2:3]
col
res <- smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
res
formula
formula <- as.formula('x1 ~ y2')
col <- as.character(formula)[2:3]
res <- smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
res
res
formula <- as.formula('y2 ~ y1')
col <- as.character(formula)[2:3]
res <- smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
col
unlist(df[,col[1],with=F])
g = unlist(df[,col[2],with=F])
g
res <- smd(x = unlist(df[,col[1],with=F]), g = unlist(df[,col[2],with=F]))
res
sample(c('a', 'b'), 100)
sample(c('a', 'b'), 100, replace = T)
a <- sample(c('a', 'b'), 100, replace = T)
b <- sample(c('a', 'b', 'c', 'd'), 100, replace = T)
smd(b, a)
a
b
smd(a, b)
smd(b, a)
b
a
res
df
group_n <- df[,length(unique(group_col))]
group_col = 'y1'
group_n <- df[,length(unique(group_col))]
group_n
df[,length(unique(group_col)),wtih=F]
group_n <- df[,length(unique(get(group_col)))]
group_n
library(data.table)
library(testthat)
Item <- c('Mean(sd)', 'Median(IQR)', '[Min,Max]', 'N/A')
res1 <- c('1', '2', '3', '4')
res2 <- c('21', '22', '23', '24')
overall <- c('o1', 'o2', 'o3', 'o4')
stat_info_tb <- data.table(Item, res1, res2, overall)
method <- c('t_test', 'wilcox_test')
p.value <- c(0.01, '<0.001')
stat_test_tb <- data.table(method, p.value)
var <- 'v1'
set.seed(123)
x1 <- c(rnorm(50, 0, 1), rnorm(50, 2, 1))
x2 <- c(rnorm(99, 2, 0.5),NA)
y1 <- c(rep('a', 50), rep('b', 50))
y2 <- c(rep('a', 50), rep('b', 50), rep('c', 50), rep('d', 50))
y3 <- c(rep('a', 3), rep('b', 97))
y4 <- c(rep(c('a', 'b'),25), rep(c('a', 'b'),24), NA, NA)
df <- data.table(x1, x2, y1, y2, y3, y4)
df
group='y1'
variable = c('x2', 'y4')
source('./src/stat_info.R')
source('./src/stat_test.R')
source('./src/type_setting.R')
source('./src/stat_info.R')
source('./src/stat_test.R')
source('./src/type_setting.R')
setwd("C:/Users/wang/Desktop/tableone/")
source('./src/stat_info.R')
source('./src/stat_test.R')
source('./src/type_setting.R')
tb_res <- data.table()
tb_res
variable
var = 'x2'
# step 1. get stat info
tb_res_u <- get_stat_info_bygroup(df=df,
var=var,
group=group)
tb_res_u
group == ''
# clean na value
df_temp <- df[,c(group, var),with=F]
df_temp <- df_temp[complete.cases(df_temp)]
# get test result
stat_test_tb <- get_stat_test(df_temp,
group_col=group,
value_col=var)
stat_test_tb
get_stat_test(df_temp,
group_col=group,
value_col=var)
df=df_temp
df_temp
group_col=group
value_col=var
method <- judge_test_name(df, group_col, value_col)
method
p.value <- c()
for(m in method){
func_ <- test_dict[[m]]
f <- as.formula(paste0(value_col, '~', group_col))
test_res <- func_(f, df)
p <- test_res$p.value
p <- ifelse(p < 0.001, '<0.001', as.character(round(p,3)))
p.value <- c(p.value, p)
}
m
func_ <- test_dict[[m]]
f <- as.formula(paste0(value_col, '~', group_col))
test_res <- func_(f, df)
test_res
source('./src/stat_info.R')
source('./src/stat_test.R')
source('./src/type_setting.R')
# clean na value
df_temp <- df[,c(group, var),with=F]
df_temp <- df_temp[complete.cases(df_temp)]
# get test result
stat_test_tb <- get_stat_test(df=df_temp,
group_col=group,
value_col=var)
stat_test_tb
tb_res_u <- run_type_setting(var=var,
stat_info_tb=tb_res_u,
stat_test_tb=stat_test_tb,
type=type)
type
# setting
map_tb <- data.table(Item = c('Mean(sd)', 'Median(IQR)', 'Mean(sd)', 'Median(IQR)'),
method = c('t_test', 'wilcox_test', 'aov_test', 'ks_test'))
p.value_col <- c('chi_test', 'fisher_test')
# check final column
overall_col <- colnames(stat_info_tb)[grepl('overall', colnames(stat_info_tb))]
var_element <- colnames(stat_info_tb)[!(colnames(stat_info_tb) %in% overall_col)]
if(is.character(stat_test_tb)){
col_final <- c('var', overall_col)
first_row <- data.table(var)
info_and_test <- stat_info_tb
}else{
col_final <- c('var', var_element, 'p.value', 'method', overall_col)
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
first_row <- data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method))
# second part (info and test)
stat_info_tb[,obs:=1:.N]
info_and_test <- merge(stat_test_tb, map_tb, all.x=T)
info_and_test <- merge(stat_info_tb, info_and_test, by='Item', all.x=T)
info_and_test <- info_and_test[order(obs)]
}
result <- rbind(first_row, info_and_test, fill=TRUE)
result
result <- result[,col_final,with=F]
result
stat_test_tb
stat_info_tb
stat_test_tb
p.value_col <- c('chi_test', 'fisher_test')
# check final column
overall_col <- colnames(stat_info_tb)[grepl('overall', colnames(stat_info_tb))]
var_element <- colnames(stat_info_tb)[!(colnames(stat_info_tb) %in% overall_col)]
overall_col
var_element
col_final <- c('var', overall_col)
first_row <- data.table(var)
info_and_test <- stat_info_tb
col_final
col_final <- c('var', var_element, 'p.value', 'method', overall_col)
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
stat_test_tb
is.character(stat_test_tb)
col_final <- c('var', var_element, 'p.value', 'method', overall_col)
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
p.value
method
first_row <- data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method))
first_row
first_row
library(data.table)
stat_test_tb
# setting
map_tb <- data.table(Item = c('Mean(sd)', 'Median(IQR)', 'Mean(sd)', 'Median(IQR)'),
method = c('t_test', 'wilcox_test', 'aov_test', 'ks_test'))
p.value_col <- c('chi_test', 'fisher_test')
# check final column
overall_col <- colnames(stat_info_tb)[grepl('overall', colnames(stat_info_tb))]
var_element <- colnames(stat_info_tb)[!(colnames(stat_info_tb) %in% overall_col)]
col_final <- c('var', var_element, 'p.value', 'method', overall_col)
col_final
overall_col
stat_test_tb
first_row
col_final <- c('var', var_element, 'p.value', 'method', overall_col, 'smd')
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
smd_v <- stat_test_tb[ method == 'smd',  p.value]
first_row <- data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method))
# second part (info and test)
stat_info_tb[,obs:=1:.N]
info_and_test <- merge(stat_test_tb, map_tb, all.x=T)
info_and_test <- merge(stat_info_tb, info_and_test, by='Item', all.x=T)
info_and_test <- info_and_test[order(obs)]
info_and_test
first_row
data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method),
smd = smd_v)
col_final <- c('var', var_element, 'p.value', 'method', overall_col, 'smd')
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
smd_v <- stat_test_tb[ method == 'smd',  p.value]
first_row <- data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method),
smd = smd_v)
# second part (info and test)
stat_info_tb[,obs:=1:.N]
info_and_test <- merge(stat_test_tb, map_tb, all.x=T)
info_and_test <- merge(stat_info_tb, info_and_test, by='Item', all.x=T)
info_and_test <- info_and_test[order(obs)]
info_and_test
first_row
col_final <- c('var', var_element, 'p.value', 'method', overall_col, 'smd')
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
smd_v <- stat_test_tb[ method == 'smd',  p.value]
first_row <- data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method),
smd = smd_v)
stat_info_tb[,obs:=1:.N]
stat_info_tb
map_tb <- data.table(Item = c('Mean(sd)', 'Median(IQR)', 'Mean(sd)', 'Median(IQR)'),
method = c('t_test', 'wilcox_test', 'aov_test', 'ks_test'))
p.value_col <- c('chi_test', 'fisher_test')
# check final column
overall_col <- colnames(stat_info_tb)[grepl('overall', colnames(stat_info_tb))]
var_element <- colnames(stat_info_tb)[!(colnames(stat_info_tb) %in% overall_col)]
if(is.character(stat_test_tb)){
col_final <- c('var', overall_col)
first_row <- data.table(var)
info_and_test <- stat_info_tb
}else{
col_final <- c('var', var_element, 'p.value', 'method', overall_col, 'smd')
# first part (title)
p.value <- stat_test_tb[ method %in% p.value_col, p.value]
method <- stat_test_tb[ method %in% p.value_col,  method]
smd_v <- stat_test_tb[ method == 'smd',  p.value]
first_row <- data.table(var,
p.value= ifelse(length(p.value) == 0, NA, p.value),
method = ifelse(length(method) == 0, NA, method),
smd = smd_v)
# second part (info and test)
stat_info_tb[,obs:=1:.N]
info_and_test <- merge(stat_test_tb, map_tb, all.x=T)
info_and_test <- merge(stat_info_tb, info_and_test, by='Item', all.x=T)
info_and_test <- info_and_test[order(obs)]
}
# combine
result <- rbind(first_row, info_and_test, fill=TRUE)
result <- result[,col_final,with=F]
result
set.seed(123)
x1 <- c(rnorm(50, 0, 1), rnorm(50, 2, 1))
x2 <- c(rnorm(99, 2, 0.5),NA)
y1 <- c(rep('a', 50), rep('b', 50))
y2 <- c(rep('a', 50), rep('b', 50), rep('c', 50), rep('d', 50))
y3 <- c(rep('a', 3), rep('b', 97))
y4 <- c(rep(c('a', 'b'),25), rep(c('a', 'b'),24), NA, NA)
df <- data.table(x1, x2, y1, y2, y3, y4)
df
create_tableone(df=df,
group='y2',
variable = c('x1', 'y3')
)
source('./src/stat_info.R')
source('./src/stat_test.R')
source('./src/type_setting.R')
create_tableone <- function(df, group, variable, type='type1'){
tb_res <- data.table()
for(var in variable){
# step 1. get stat info
tb_res_u <- get_stat_info_bygroup(df=df,
var=var,
group=group)
# step 2. get stat test
if(group == ''){
stat_test_tb = ''
}else{
# clean na value
df_temp <- df[,c(group, var),with=F]
df_temp <- df_temp[complete.cases(df_temp)]
# get test result
stat_test_tb <- get_stat_test(df=df_temp,
group_col=group,
value_col=var)
}
# step 3. type_setting
tb_res_u <- run_type_setting(var=var,
stat_info_tb=tb_res_u,
stat_test_tb=stat_test_tb,
type=type)
# combine
tb_res <- rbind(tb_res, tb_res_u)
tb_res <- replace(tb_res,is.na(tb_res), "")
}
return(tb_res)
}
create_tableone(df=df,
group='y2',
variable = c('x1', 'y3'))
create_tableone(df=df,
group='y1',
variable = c('x1', 'y3'))
source('./src/stat_info.R')
source('./src/stat_test.R')
source('./src/type_setting.R')
create_tableone <- function(df, group, variable, type='type1'){
tb_res <- data.table()
for(var in variable){
# step 1. get stat info
tb_res_u <- get_stat_info_bygroup(df=df,
var=var,
group=group)
# step 2. get stat test
if(group == ''){
stat_test_tb = ''
}else{
# clean na value
df_temp <- df[,c(group, var),with=F]
df_temp <- df_temp[complete.cases(df_temp)]
# get test result
stat_test_tb <- get_stat_test(df=df_temp,
group_col=group,
value_col=var)
}
# step 3. type_setting
tb_res_u <- run_type_setting(var=var,
stat_info_tb=tb_res_u,
stat_test_tb=stat_test_tb,
type=type)
# combine
tb_res <- rbind(tb_res, tb_res_u)
tb_res <- replace(tb_res,is.na(tb_res), "")
}
return(tb_res)
}
