install.packages('testthat')
source("../stat_info_util.R", chdir = TRUE)
source("../src/stat_info_util.R", chdir = TRUE)
library(testthat)
x <- c(1,2,3)
mean(x)
sd(x)
x <- c(1,1,2,2,3,4,NA)
mean(x)
mean(x,na.rm=T)
x <- c(1,1,2,2,3,4,5,NA)
mean(x)
mean(x,na.rm=T)
SD(x,na.rm=T)
std(x,na.rm=T)
sd(x,na.rm=T)
test_that("mean_func", {
expect_equal(mean_func(c(1,2,3)), '2.57(1.51)')
})
x <- c(1,1,2,2,3,4,5,NA)
test_that("mean_func", {
expect_equal(mean_func(c(1,2,3)), '2.57(1.51)')
})
x <- c(1,1,2,2,3,4,5,NA)
test_that("mean_func", {
expect_equal(mean_func(x), '2.57(1.51)')
})
median(x, na.rm=T)
iqr(x, na.rm=T)
IQR(x, na.rm=T)
test_that("median_func", {
expect_equal(median_func(x), '2(2)')
})
range_func(x, na.rm=T)
min(x)
min(x,na.rm=T)
max(x,na.rm=T)
length(x)
1/8
test_that("count_na_func", {
expect_equal(range_func(x), '1(12.5%)')
})
test_that("count_na_func", {
expect_equal(count_na_func(x), '1(12.5%)')
})
x <- c('a', 'a', 'b', 'b', NA)
x <- c('a', 'a', 'b', 'b', NA)
percent_func(x)
test_that("percent_func", {
x <- c('a', 'a', 'b', 'b', NA)
res <- c('2(50%)', '2(50%)')
names(res) <- c('a', 'b')
expect_equal(percent_func(x), res)
})
1/8
Item <- c('[Min,Max]', 'N/A')
value <- c('[1,5]', '1(12.5%)')
res <- data.table(Item, value)
res
test_that("stat_info_numeric", {
x <- c(1,1,2,2,3,4,5,NA)
run_stat_byclass_dict = list(
numeric = c('[Min,Max]', 'N/A')
)
# result
Item <- c('[Min,Max]', 'N/A')
value <- c('[1,5]', '1(12.5%)')
res <- data.table(Item, value)
expect_equal(stat_info(x=x,run_stat_byclass_dict=run_stat_byclass_dict), res)
})
x <- c(1,1,2,2,3,4,5,NA)
run_stat_byclass_dict = list(
numeric = c('[Min,Max]', 'N/A')
)
# result
Item <- c('[Min,Max]', 'N/A')
res <- c('[1,5]', '1(12.5%)')
res <- data.table(Item, res)
res
expect_equal(stat_info(x=x,run_stat_byclass_dict=run_stat_byclass_dict), res)
test_that("stat_info_numeric", {
x <- c(1,1,2,2,3,4,5,NA)
run_stat_byclass_dict = list(
numeric = c('[Min,Max]', 'N/A')
)
# result
Item <- c('[Min,Max]', 'N/A')
res <- c('[1,5]', '1(12.5%)')
res <- data.table(Item, res)
expect_equal(stat_info(x=x,run_stat_byclass_dict=run_stat_byclass_dict), res)
})
test_that("stat_info_character", {
run_stat_byclass_dict = list(
character = c('percent_by_element', 'N/A')
)
x <- c('a', 'a', 'b', 'b', NA)
run_stat_byclass_dict = list(
numeric = c('[Min,Max]', 'N/A')
)
# result
Item <- c('a', 'b', 'N/A')
res <- c('2(50%)', '2(50%)', '1(20%)')
res <- data.table(Item, res)
expect_equal(stat_info(x=x,run_stat_byclass_dict=run_stat_byclass_dict), res)
})
test_that("stat_info_character", {
run_stat_byclass_dict = list(
character = c('percent_by_element', 'N/A')
)
x <- c('a', 'a', 'b', 'b', NA)
# result
Item <- c('a', 'b', 'N/A')
res <- c('2(50%)', '2(50%)', '1(20%)')
res <- data.table(Item, res)
expect_equal(stat_info(x=x,run_stat_byclass_dict=run_stat_byclass_dict), res)
})
testthat::test_dir(“tests”)
testthat::test_dir("tests")
library(data.table)
mean_func <- function(x){
m <- mean(x, na.rm = T)
s <- sd(x, na.rm = T)
res <- paste0(round(m,2),'(',round(s,2),')')
return(res)
}
median_func <- function(x){
m <- median(x, na.rm = T)
s <- IQR(x, na.rm = T)
res <- paste0(round(m,2),'(',round(s,2),')')
return(res)
}
range_func <- function(x){
mi <- min(x, na.rm = T)
mx <- max(x, na.rm = T)
res <- paste0('[', round(mi,2), ',', round(mx,2), ']')
return(res)
}
count_na_func <- function(x){
tot <- length(x)
na_count <- sum(is.na(x))
p <- round((na_count / tot), 4)*100
res <- paste0(na_count, '(', p, '%)')
return(res)
}
percent_func <- function(x){
tot <- length(x[!is.na(x)])
count_per_element <- table(x)
percent_per_element <- round((count_per_element / tot), 4)*100
res <- paste0(count_per_element, '(', percent_per_element, '%)')
names(res) <- names(percent_per_element)
return(res)
}
stat_info_func_dict = list(
`Mean(sd)` = mean_func,
`Median(IQR)` = median_func,
`[Min,Max]` = range_func,
`N/A` = count_na_func,
percent_by_element = percent_func
)
stat_info <- function(x,
run_stat_byclass_dict = list(
numeric = c('Mean(sd)', 'Median(IQR)', '[Min,Max]', 'N/A'),
character = c('percent_by_element', 'N/A'))
){
variable_class = class(x)
stat_info_v <- run_stat_byclass_dict[[variable_class]]
res_tb <- data.table()
for(stat_info_name in stat_info_v){
func_ <- stat_info_func_dict[[stat_info_name]]
res <- func_(x)
if(is.null(names(res))){
Item <- stat_info_name
}else{
Item <- names(res)
}
res_temp <- data.table(Item, res)
res_tb <- rbind(res_tb, res_temp)
}
return(res_tb)
}
testthat::test_dir("tests")
testthat::test_dir("../tests")
